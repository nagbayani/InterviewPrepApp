// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//  q: Why aren't there any colors on this page?
//a: 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url ="file:./dev.db"
}
  //url      = env("DATABASE_URL")

model User {
  id        String  @id @default(cuid())
  name      String?  
  email     String  @unique
  password  String?  
  image     String?  
  decks     Deck[]
  cards     Card[]
  accounts  Account[]
  tags      Tag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  emailVerified DateTime?
  // role      UserRole @default(USER)
  // isTwoFactorEnabled Boolean @default(false)
  // twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String? 
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}


model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}


model Deck {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  cards     Card[]
  author    User    @relation(fields: [authorId], references: [id])
  authorId  String
}


model Card {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  question  String
  answer    String 
  category  String
  author    User    @relation(fields: [authorId], references: [id])
  authorId  String
  deck      Deck    @relation(fields: [deckId], references: [id])
  deckId    String
  tags      CardTags[]  // each card can have multiple tags
}

// handles tag-specific attributes
model Tag {
  id    String   @id @default(cuid())
  name  String
  color String  
  authorId String   // No default value
  author    User    @relation(fields: [authorId], references: [id])
  cards CardTags[]   // each tag can be associated with multiple cards
}

// Join table for Card and Tag
model CardTags {
  cardId String
  tagId  String
  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  // create composite primary key - pair of cardId and tagId are unique
  @@id([cardId, tagId])
}

// Mock Interviews -- Interview Template import Cards -- probably add template to match in CArds table