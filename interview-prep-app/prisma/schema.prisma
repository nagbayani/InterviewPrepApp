// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//  q: Why aren't there any colors on this page?
//a: 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url ="file:./dev.db"
}
  //url      = env("DATABASE_URL")

model User {
  id        String  @id @default(cuid())
  name      String?  
  email     String  @unique
  password  String?  
  image     String?  
  decks     Deck[]
  cards     Card[]
  tags      Tag[]
  mockTemplates MockTemplate[] 
  interviews Interview[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts  Account[]
  emailVerified DateTime?
  userResume UserResume?
  // role      UserRole @default(USER)
  // isTwoFactorEnabled Boolean @default(false)
  // twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String? 
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}


model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}
model UserResume {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  pdfUrl      String?   // URL of the uploaded PDF file
  skills      String   
  experience  String   
  projects    String  
}

model Deck {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  cards     Card[]
  author    User    @relation(fields: [authorId], references: [id])
  authorId  String
  thumbnail  String?  
  description String?
  unassigned  Boolean   @default(false) // New field for unassigned status, used for storing unassigned cards
}




model Card {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  question  String
  answer    String 
  author    User    @relation(fields: [authorId], references: [id])
  authorId  String
  deck      Deck    @relation(fields: [deckId], references: [id])
  deckId    String
  tags      CardTags[]  // each card can have multiple tags
  mockTemplates MockTemplateCard[] // Relation to MockTemplateCard for importing cards into templates
  feedback  String?  // Store feedback as serialized JSON
  keysForAnswer String?  // Store keys for improvement as serialized JSON

}

// handles tag-specific attributes
model Tag {
  id    String   @id @default(cuid())
  name  String
  color String  
  authorId String   // No default value
  author    User    @relation(fields: [authorId], references: [id])
  cards CardTags[]   // each tag can be associated with multiple cards
}

// Join table for Card and Tag
model CardTags {
  cardId String
  tagId  String
  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  // create composite primary key - pair of cardId and tagId are unique
  @@id([cardId, tagId])
}

// Mock Interviews -- Interview Template import Cards -- probably add template to match in Cards table
model MockTemplate {
  id             String        @id @default(cuid())
  title          String
  description    String?
  type           String
  author         User          @relation(fields: [authorId], references: [id])
  authorId       String
  cards          MockTemplateCard[]  // Many-to-many relationship with cards through MockTemplateCard
  interview      Interview     @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  interviewId    String     
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  interviewStage  InterviewStage?
}

model MockTemplateCard {
  templateId String
  cardId     String
  template   MockTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  card       Card         @relation(fields: [cardId], references: [id], onDelete: Cascade)
  stage      String?      // Stage of the interview the card is associated with
  order      Int?         // Order of the card in the interview stage
  @@id([templateId, cardId]) // Composite primary key to ensure unique pairing
}

model Interview {
  id             String        @id @default(cuid())
  company       String
  jobPosition    String
  expectedSalary String?
  jobDescription String?
  skills         String?
  qualifications String?
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  mockTemplates  MockTemplate[] // One-to-many relation with MockTemplate
  interviewStages InterviewStage[] // One-to-many relation with InterviewStage
  mockTemplateId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  location       String?
  dateApplied    DateTime?
  dateFollowUp   DateTime?
  status         String?
}


model InterviewStage {
  id            String        @id @default(cuid())
  stageDate     DateTime?
  format        String?
  type          String?
  interview     Interview     @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  interviewId   String
  mockTemplate    MockTemplate? @relation(fields: [mockTemplateId], references: [id], onDelete: SetNull)
  mockTemplateId   String?       @unique // Must be unique for a one-to-one relationship to Mock Template 
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}